卡特彼勒（英语：Caterpillar Inc.，NYSE：CAT）是总部位于美国伊利诺伊州迪尔菲尔德的重型工业设备制造公司，主要产品包括农业、建筑及采矿等工程机械和柴油发动机、天然气发动机及燃气涡轮发动机。根据其公司网站，卡特彼勒（一般简称为 CAT）是“世界上最大的建筑、采矿设备、柴油、天然气引擎和工业汽轮机生产商。
他们的一些早期创新产品创新包括履带和一个独特的黄色外观。卡特彼勒也生产各种工程作业车辆，包括卡特彼勒推土机。
卡特彼勒是道琼斯工业平均指数的三十家公司之一。
卡特彼勒公司的历史从19世纪末就开始，当时 Daniel Best 和 Benjamin Holt 进行蒸汽拖拉机的实验，想将其实用于农耕。1904年，这些巨大的蒸汽拖拉机已经在加州的农地中耕种了14年，但经常陷入加州柔软的土壤之中，特别是在大雨后的泥泞农地。而且一旦陷入泥沼就很难再退出来，即使用马群拉也动弹不得，因为拖拉机有数吨之重。
针对这个问题，当时的一个解决方案是在蒸汽拖拉机前面铺一条临时的木板路以帮助拖拉机脱离泥潭，但这个方案非常耗时、昂贵，且易受到土方的影响。Holt 反其道而行，想将木板路装在驱动轮上。1904年11月24日，Holt 将一块块小木条连接起来，套在他的实验性拖拉机 Holt No.77 的轮子上，这次试验非常成功，现代拖拉机从此诞生，卡特彼勒30与卡特彼勒60拖拉机开始使当时的卡特彼勒公司逐渐出名。
1909年，Benjamin Holt 在美国伊利诺伊州皮奥里亚购买了一间已破产的拖拉机公司厂房，但工厂设施还很崭新。这个工厂提供给 Holt 建立一个制造中心所需要的一切，但改造这个工厂需要很多的资金。尽管如此，这次冒险行动后来被证明是非常成功的。1911年，工厂雇用了625人。与此同时，Holt 制造开始向阿根廷、墨西哥和加拿大出口拖拉机。
卡特彼勒公司成立于1925年4月15日，位于加州斯托克顿的 Holt 制造公司与位于加州圣莱安德罗（San Leandro）的 C. L. 最佳煤气拖拉机公司（C. L. Best）合并，成立了卡特彼勒拖拉机公司。第一年的销售量达到1300万美元。1925年至1931年，卡特彼勒与苏联合作，改建或扩建了哈尔科夫、列宁格勒、斯大林格勒的拖拉机和收割机厂，并授权车里雅宾斯克拖拉机厂生产60型号（即 ChTZ S-60）。1929年，销售量达到了5280万美元。即使在大萧条时期，卡特彼勒公司的销售额仍然在增长。
公司成立后，卡特彼勒经历了许多变迁，包括柴油引擎被美国海军采用。第二次世界大战时期，卡特彼勒产品被美国海军工兵团采用来建设太平洋行动中心的设施。在战后建设潮中，卡特彼勒公司快速成长。1950年首次在美国以外融资，成为一家跨国公司。
2010年6月，卡特彼勒以8.20亿美元的价格收购易安迪，以进一步扩张其在铁路领域的业务。
2011年11月11日最高斥资65.4亿港元全面收购香港创业板上市的年代煤矿机电。年代煤矿机电执行主席兼大股东 Emory Williams 持有46.9％权益约值21.3亿元。


因疫情影响，我9月15日正式入职，入职前已经与项目经理有了充分的沟通，本人也做了十足的准备，为了尽快入职也在家里就做好了入职体检、背景调查等工作。每天由班车接送，前几天主要进行入职培训，教我们一些信息安全、岗位相关信息、企业文化、实验室相关安全要求、保密协议和个人防护相关的知识。
后面申请下了个人电脑，然后和项目经理约会讨论项目，前期讨论了大体4个方向：virtual test cell system、X-BOX Measure box、大数据分析处理实验室数据与实验室移动机器人。在初步拟定方向后，项目经理分别约了相关同事与我进一步开会详谈。大体顶下第一个项目：Virtual test cell system。在接下来的时间我主要进行项目的开发，但开发大约1/3时，项目经理找我约会开始讨论第二个项目了，最初我很诧异，在我的传统观念中，还是类似于单线程的项目开展，我的主管在后面也为我解决了疑惑，大体来说：多项目管理与一般单项目管理虽然都属于项目管理大的范畴，但还是有很大区别，概括为以下四方面：
1.战略性：组织范围内的项目管理是企业战略的体现，多项目管理必须站在决策层面对组织中所有项目进行评估、计划、执行与控制。一般项目管理则是站在执行层面进行项目管理。
2.动态性：多项目管理能根据随企业内外部环境变化而变化的战略目标、需求和特征变化等，及时对项目进行调整，处理项目间资源、效益等的互相影响，这是一般项目管理所不能解决的。
3.最佳资源利用率：一般项目管理假定项目资源得到保障的，以固定资源实现既定目标。多项目管理则是假定存在多个项目，通过协调和分配现有项目资源，获得最佳项目实施组合，通过对固定资源的最佳配置获取最大利益。
4.组织的整合性：一般项目管理中，各项目实施过程中人员相互沟通少，沟通效率和有效性较低。而多项目管理中，项目组中各项目小组成员在统一的合作体中工作，技术、知识、信息共享程度较高，易形成和强化统一的合作观念，沟通效率和有效性较高。
这个多项目管理的概念让我受益良多，接下来就是第二个项目：X-BOX Measure box，该项目在与校内导师多次沟通修改的情况下，也顺利的作为了我的企业毕设，在野外作业以及车上作业等非实验室环境中，现有的测试设备使用较为繁琐，有着需找到合适电源、携带并使用个人电脑、携带大量传感器、采集启停延迟较大等问题、且稳定性、便捷性不高，十分不利于实验人员在户外做测试，考虑到效率和生成，拟开发综合性便携实验箱，为野外作业客制化设计，以使用为核心，制作出实物。
主要工作是将每个模块定制化与集成化，缩小整体体积，在不牺牲整体性能的前提下尽可能的使整个设备更加的人性化，增强整个设备的人机交互性能用以提高用户体验，增加设备的通用性，用以适应不同的使用场景，以及增加安全性校验，确保设备的信息安全。目前仍在进行中。
在实习过程中我还体验了一次部门团建与员工日，这次是第一次真正意义上体验到了企业与员工的关系。团建不仅仅是为了企业为员工提供福利性活动以此来吸引，留住员工更是为了.企业文化建设需要、改善企业员工之间的关系，增加员工之间的熟悉度，以便减少矛盾。在最初我和大家都不熟悉，仅有项目组的几位成员有一些交流，但在经历了员工日和团建后，我认识了更多的同事，切切实实的感受到了其带来的好处大体分为5点：
1.改善人际关系，人与人只有近距离接触与沟通才能增进了解，有了和谐的氛围才能行程凝聚力。
2.丰富企业文化，多样性的团建活动能让员工的业余生活更加多彩。
3.让管理可以通过活动从另外一个角度去认识员工，发现其新的能力与性格特点，以便后续管理，培训。
4.在员工的角度来说增加自己的阅历和经验，因为团建的地点往往不同，同时和同事之间交流分享的观点多了也能学习到别人的优点。
5.成功的团建活动还能增加企业的外部形象。
除此之外，让我影响最深的就是卡特的人性化管理，除了部分与国外工程师的会议，大多数员工都是准时下班，这与社会目前主流的加班文化不同，准时的下班让每天的工作强度十分明确，项目安排也可以更为合理，不混乱。还让员工每天有着充足的时间去休息、去保持家庭与工作的平衡，让员工有着更多自由时间，大大较少了员工的心理压力。这是我认为十分重要的，尤其是在目前的社会环境中。

实例介绍：
1. Virtual test cell system
Virtual test cell system初期定于Microsoft Office365的Power Apps套件进行开发。
Power Apps 是一个由一组应用、服务和连接器构成的数据平台，可让你根据业务需求生成自定义应用。 通过使用 Power Apps，可以快速生成自定义业务应用，使其连接到存储在基础数据平台 (Common Data Service) 或各种联机和本地数据源（SharePoint、Excel、Office 365、Dynamics 365、SQL Server 等）的业务数据。
使用 Power Apps 生成的应用提供丰富的业务逻辑和工作流功能，可将手动业务流程转换为自动化数字流程。 Power Apps 使用户无需编写代码即可生成功能丰富的应用，从而简化了自定义业务应用生成体验。
Power Apps 还提供一个可扩展的平台，让专业开发者以编程方式与数据和元数据交互、应用业务逻辑、创建自定义连接器以及与外部数据集成。
它也是一种low code的面向对象的类图形化开发，Low-Code是近年来也较为热门的一个概念。基于经典的可视化和模型驱动理念，结合最新的云原生与多端体验技术，低代码能够在合适的业务场景下实现大幅度的提效降本，为专业开发者提供了一种全新的高生产力开发范式（Paradigm Shift）。另一方面，低代码还能让不懂代码的业务人员成为所谓的平民开发者（Citizen Developer），弥补日益扩大的专业人才缺口，同时促成业务与技术深度协作的终极敏捷形态（BizDevOps）。低代码开发平台（LCDP）本身也是一种软件，它为开发者提供了一个创建应用软件的开发环境。对于程序员而言，低代码开发平台的性质与IDEA、VS等代码IDE（集成开发环境）几乎一样，都是服务于开发者的生产力工具。与传统代码IDE不同的是，低代码开发平台提供的是更高维和易用的可视化IDE。大多数情况下，开发者并不需要使用传统的手写代码方式进行编程，而是可以通过图形化拖拽、参数配置等更高效的方式完成开发工作。
其出现的意义既不是指抽象程度很低（相反，低代码开发方式的抽象程度要比传统编程语言高一个level），也不是指代码很low（也相反，低代码所生成的代码一般都经过精心维护和反复测试，整体质量强于大部分手写代码），而是单纯的“少写代码” —— 只在少数需要的情况下才手写代码，其他大部分时候都能用可视化等非代码方式解决。
更深一层，低代码不只是少写代码而已：代码写得少，bug也就越少（正所谓“少做少错”），因此开发环节的两大支柱性工作“赶需求”和“修bug”就都少了；要测的代码少了，那么测试用例也可以少写不少；除了开发阶段以外，平台还覆盖了后续的应用构建、部署和管理，因此运维操作也更少了（Low-Code → Low-Ops）。

然而，少并不是最终目的：如果单纯只是想达到少的效果，砍需求减人力、降低质量要求也是一样的。低代码背后的哲学，是少即是多（Less is More），或者更准确说是多快好省（Do More with Less） —— 能力更多、上线更快、质量更好，成本还更省，深刻践行了阿里“既要，又要，还要”的价值观精髓。
因此我学习了Power Apps的开发与使用，做出了多版demo，最终在项目组中反响较好。在最近的一次项目会议中，我们项目组充分讨论，结合实际使用与拓展性、开发周期等考虑，将Share Point作为项目的主要承载平台，充当glue的角色，将Power point、Power BI、Power Apps、Flow、One drive等各个套件粘合。目前仍在进行中。
2. X-BOX Measure box
该项目在最初讨论时整体分为2部分，机械结构以及供电部分和系统设计与软件部分，本人主要负责系统设计与软件部分，系统整体大致分为Sensor & ADC模块、Speed/Quantity Measurement 模块、Main control Unit模块、Remote Terminal模块以及HMI Display模块。Sensor & ADC模块负责将发动机相关物理参数如缸压、温度等软换成对应数字量，以便记录、分析、显示；Speed/Quantity Measurement模块负责处理转速传感器输出方波或者正弦波，将其与转换成实际的转速记录，以及高采样率的采样电荷’Main control Unit模块是整个系统的核心，负责与各个模块通讯、协调各个模块的工作，并将数据加密记录至SD卡中；Remote Terminal模块负责远程控制与显示，由于使用无线通讯，受带宽及时延限制，其显示频率相较于试验箱上的显示器分辨率更低，但是提供了很好的远程监控手段，减少了垃圾数据的产生。最后HMI Display模块负责整个人机交互，账密匹配、参数的确定以及数据曲线显示等诸多以前需要借助上位机才能实现的功能全部集成在试验箱中。
最初给出的架构是使用STM32作为MCU，运行RTOS去控制各个模块有序工作，交互上用的HMI屏幕是自带SDK的，还有这自己的仿真环境，开发相对OOP，有较好的交互性与延展性。
